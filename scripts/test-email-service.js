const emailService = require('./services/emailService');
require('dotenv').config({ path: './config.env' });

async function testEmailService() {
    console.log('üß™ Testing Enhanced Email Service\n');

    // Test data
    const testJobData = {
        title: 'Senior Full Stack Developer',
        company: 'Tech Innovations Inc',
        location: 'San Francisco, CA',
        posterFullName: 'Sarah Johnson',
        posterProfileUrl: 'https://linkedin.com/in/sarah-johnson-tech',
        jobUrl: 'https://linkedin.com/jobs/view/123456789',
        about: 'Experienced engineering manager with 8+ years leading high-performing teams',
        companyWebsite: 'https://techinnovations.com'
    };

    try {
        // Test 1: Check system status
        console.log('üìä Test 1: System Status Check');
        const configResult = await emailService.testEmailConfig();
        console.log('Email Config:', configResult);
        console.log('Has AI Provider:', emailService.hasAIProvider());
        console.log('');

        // Test 2: Get available templates
        console.log('üìù Test 2: Available Templates');
        const templates = emailService.getTemplates();
        console.log('Templates:', templates);
        console.log('');

        // Test 3: Generate template email (fallback)
        console.log('üìß Test 3: Template Email Generation');
        const templateEmail = emailService.generateTemplateEmail(testJobData);
        console.log('Template Email Subject:', templateEmail.subject);
        console.log('Template Email Body Preview:', templateEmail.body.substring(0, 100) + '...');
        console.log('Generated By:', templateEmail.generatedBy);
        console.log('');

        // Test 4: Generate AI email (if AI providers available)
        if (emailService.hasAIProvider()) {
            console.log('ü§ñ Test 4: AI Email Generation');
            try {
                const aiEmail = await emailService.generateEmailWithAI(testJobData, 'job_outreach');
                console.log('AI Email Subject:', aiEmail.subject);
                console.log('AI Email Body Preview:', aiEmail.body.substring(0, 150) + '...');
                console.log('Generated By:', aiEmail.generatedBy);
                console.log('Research Info Available:', !!aiEmail.research);
                console.log('Ice Breaker:', aiEmail.iceBreaker);
                console.log('');
            } catch (error) {
                console.log('AI Email Generation Failed:', error.message);
                console.log('');
            }
        } else {
            console.log('‚ö†Ô∏è Test 4: Skipped - No AI providers configured');
            console.log('To test AI features, add API keys to config.env:');
            console.log('- OPENAI_API_KEY');
            console.log('- OPENROUTER_API_KEY');
            console.log('- ANTHROPIC_API_KEY');
            console.log('');
        }

        // Test 5: Main generateEmail method
        console.log('üéØ Test 5: Main Email Generation Method');
        const mainEmail = await emailService.generateEmail(testJobData, {
            templateKey: 'job_outreach',
            useAI: true
        });
        console.log('Main Email Subject:', mainEmail.subject);
        console.log('Main Email Body Preview:', mainEmail.body.substring(0, 100) + '...');
        console.log('Generated By:', mainEmail.generatedBy);
        console.log('');

        // Test 6: Reputation management template
        console.log('üíº Test 6: Reputation Management Template');
        const repEmail = await emailService.generateEmail(testJobData, {
            templateKey: 'reputation_management',
            useAI: true
        });
        console.log('Rep Email Subject:', repEmail.subject);
        console.log('Rep Email Body Preview:', repEmail.body.substring(0, 100) + '...');
        console.log('Generated By:', repEmail.generatedBy);
        console.log('');

        // Test 7: Add custom template
        console.log('üîß Test 7: Custom Template Addition');
        const customTemplate = {
            name: 'Test Template',
            systemPrompt: 'You are a test email writer. Write a simple test email.',
            userPromptTemplate: 'Write a test email for {{posterName}} at {{company}}.'
        };
        emailService.addTemplate('test_template', customTemplate);
        
        const customEmail = await emailService.generateEmail(testJobData, {
            templateKey: 'test_template',
            useAI: false
        });
        console.log('Custom Email Subject:', customEmail.subject);
        console.log('Custom Email Generated By:', customEmail.generatedBy);
        console.log('');

        // Test 8: Email sending (dry run)
        console.log('üì§ Test 8: Email Sending (Dry Run)');
        const testEmail = process.env.TEST_EMAIL;
        if (testEmail && configResult.success) {
            try {
                const jobWithEmail = { ...testJobData, emailContent: mainEmail };
                console.log('Would send email to:', testEmail);
                console.log('Email configured:', configResult.success);
                console.log('In production mode:', process.env.NODE_ENV === 'production');
                console.log('');
            } catch (error) {
                console.log('Email send test failed:', error.message);
                console.log('');
            }
        } else {
            console.log('‚ö†Ô∏è Email sending test skipped - configure SMTP and TEST_EMAIL in config.env');
            console.log('');
        }

        // Test 9: HTML formatting
        console.log('üé® Test 9: HTML Formatting');
        const htmlFormatted = emailService.formatEmailAsHtml(mainEmail.body);
        console.log('HTML Preview:', htmlFormatted.substring(0, 200) + '...');
        console.log('');

        // Test 10: Error handling
        console.log('‚ö†Ô∏è Test 10: Error Handling');
        try {
            await emailService.generateEmail({}, { templateKey: 'nonexistent_template' });
        } catch (error) {
            console.log('Error handling works - caught:', error.message);
        }
        console.log('');

        console.log('‚úÖ All tests completed successfully!');
        console.log('\nüìã Summary:');
        console.log(`- Email Service: ${configResult.success ? '‚úÖ Configured' : '‚ùå Not configured'}`);
        console.log(`- AI Providers: ${emailService.hasAIProvider() ? '‚úÖ Available' : '‚ùå Not configured'}`);
        console.log(`- Templates: ${templates.length} available`);
        console.log(`- Template Generation: ‚úÖ Working`);
        console.log(`- AI Generation: ${emailService.hasAIProvider() ? '‚úÖ Available' : '‚ö†Ô∏è Requires API keys'}`);

    } catch (error) {
        console.error('‚ùå Test failed:', error);
        console.error(error.stack);
    }
}

// Run tests if called directly
if (require.main === module) {
    testEmailService();
}

module.exports = { testEmailService }; 